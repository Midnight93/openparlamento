<?php

/**
 * Subclass for performing query and update operations on the 'sf_news_cache' table.
 * This contains only generic logic.
 *
 * Logic specific to the project using the plugin may be found in subclasses extending this one
 * 
 *
 * @package plugins.deppPropelMonitoringBehaviorsPlugin.lib.model
 */ 
class NewsPeer extends BaseNewsPeer
{

  /**
   * returns the array of all the News that regards grouped events
   *
   * @return array of News
   * @author Guglielmo Celata
   **/
  public static function getAllGroupNews()
  {
    $c = new Criteria();
    $c->add(NewsPeer::GENERATOR_PRIMARY_KEYS, null);
    return NewsPeer::doSelect($c);
  }

  /**
   * return all news generated by generator object
   *
   * @param  BaseObject generator
   * @return array of News
   * @author Guglielmo Celata
   **/
  public static function getNewsGeneratedByGenerator($generator)
  {
    return self::getNewsGeneratedByGeneratorModelAndPrimaryKeys(get_class($generator), serialize($generator->getPrimaryKeysArray()));
  }
  
  /**
   * return all news generated by generator model and keys
   *
   * @param  String generator_model - the PhpName of the model
   * @param  String generator_keys  - the primary keys (serialized, of the generator)
   * @return array of News
   * @author Guglielmo Celata
   **/
  public static function getNewsGeneratedByGeneratorModelAndPrimaryKeys($generator_model, $generator_keys)
  {
    $c = new Criteria();
    $c->add(NewsPeer::GENERATOR_MODEL, $generator_model);
    $c->add(NewsPeer::GENERATOR_PRIMARY_KEYS, $generator_keys);
    return NewsPeer::doSelect($c);
  }

  /**
   * return all news objects ahvinc given monitorable model and id
   *
   * @param  String generator_model - the PhpName of the model
   * @param  int    generator_id    - the primary key
   * @return array - Objects meeting the criteria
   * @author Guglielmo Celata
   **/
  public static function getNewsRelatedToMonitorableModelAndId($monitorable_model, $monitorable_id)
  {
    $c = new Criteria();
    $c->add(self::RELATED_MONITORABLE_MODEL, $monitorable_model);
    $c->add(self::RELATED_MONITORABLE_ID, $monitorable_id);
    return self::doSelect($c);
  }
  
  
}
