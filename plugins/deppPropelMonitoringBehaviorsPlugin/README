= deppPropelMonitoringBehaviorsPlugin =
[[PageOutline(2-6, Table of contents)]]

== Introduction ==
This is a plugin that allows users to monitor objects.

''Monitoring'' here doesn't really mean anything more than a general marking. 
A user states his interest in an object. A record is inserted in a table and that's all.

This is going to be used to catch events generated by the objects, or to get informations on 
modifications of the objects, by other users. It is not important at this point, since this is a rather generic plugin.

Objects to be monitored are called '''monitorable''' and are added the actAsMonitorable behavior.
Users are called '''monitorers''' and are added the actAsMonitorer behavior, 
in order to ease the handling and counting of objects monitored by the user.

The plugin is composed by two behaviors:
 * [#ActAsMonitorablebehavior actAsMonitorable]
 * [#ActAsMonitorerbehavior actAsMonitorer]

The plugin introduces the ''sf_monitoring'' table, that keeps track of who's monitoring what.

[[Image(MonitoringER.png)]]

== Installation ==

To install the plugin, run this command within your symfony project :

{{{
symfony plugin-install http://symfony-plugins.depp.it/deppPropelMonitoringBehaviorsPlugin
}}}

The source code is also available:
 * TODO
   [http://?????????/deppPropelActAsMonitoringBehaviorsPlugin/ from the SVN repository] 
   (please always use a tagged version in production)
   

== General Configuration ==

To activate these Propel behaviors in Symfony, you must first be sure that behaviors 
are activated in your propel.ini file. Check for this line, or add it:
{{{
propel.builder.addBehaviors = true
}}}

Then follow the configuration instructions for the behaviors, and apply them to your
existing model object classes.

In one (or more) of your existing model object classes, apply the behavior. Eg. 
for a {{{User}}} monitoring an {{{Article}}}:

{{{
#!php
<?php
class Article extends BaseArticle
{
}
sfPropelBehavior::add('Article', array('deppPropelActAsMonitorableBehavior'));
}}}

and 

{{{
#!php
<?php
class User extends BaseUser
{
}
sfPropelBehavior::add('User', array('deppPropelActAsMonitorerBehavior'));
}}}


You can fine-tune behaviors with optional parameters, see the configuration sections for the
[#ActAsMonitorablebehavior actAsMonitorable behavior] and the 
[#ActAsMonitorerbehavior actAsMonitorer behavior].

Once your model is configured, you have to rebuild it:

{{{
symfony propel-build-all
}}}

And clear the cache :

{{{
symfony cc
}}}

This is a rather basic plugin, and it may be used by an application to implement a monitoring component.

== Schema ==

The plugin introduces the sf_monitoring table, naming the model Monitoring. The table is used to track who's monitoring what.
This is the yml schema:
{{{
propel:
  _attributes:      { package: plugins.deppPropelMonitoringBehaviorsPlugin.lib.model }

  sf_monitoring:
    _attributes:    { phpName: Monitoring, package: plugins.deppPropelMonitoringBehaviorsPlugin.lib.model }
    id:
    monitorable_model:    { type: varchar, size: 50, required: true }
    monitorable_id:       { type: integer, required: true }
    user_id:              { type: integer }
    created_at:
    _indexes:
      monitorable_index:  [monitorable_model, monitorable_id, user_id]
}}}

== !ActAsMonitorable behavior ==

=== Configuration === #actAsMonitorableBehaviorConfiguration


{{{
#!php
<?php
class Article extends BaseArticle
{
}
sfPropelBehavior::add(
  'Article', 
  array('deppPropelActAsMonitorableBehavior' =>
        array('count_monitoring_users_field'    => 'NMonitoringUsers',     // refers to ArticlePeer::N_MONITORING_USERS
              'monitorer_model'                 => 'User',                 // the model for the monitorer object
              'count_monitored_objects_field'   => 'NMonitoredArticles',   // refers to UserPeer::N_MONITORING_ARTICLES
       )));
}}}

 * The {{{count_monitoring_users_field}}} parameter, which refers to an {{{unsigned integer}}} column in phpName format of your object table, will store cached  value of the actual number of users monitoring the object. Useful for queries performances.
 * The {{{monitorer_model}}} parameter sets the model that will play the monitorer part. This is used in order to work correctly with the   [wiki:deppPropelActAsMonitorerBehaviorPlugin actAsMonitorer] behavior.
 * The {{{count_monitored_objects_field}}} identifies the field in the Monitorer class, that store the cache for the number of objects of type Article monitored by the user. Each type of monitorable object can have a different storage. The count_monitored_objects_field in the Monitorer configuration parameters, is always present and is used as default, in case the specified field does not exist (or if no field is specified).

The monitorable object is uniquely identified by its model name and primary key, '''no other fields are allowed'''.


=== API  ===

Note: In below examples, {{{$user_id}}} is a string representing the 
primary key to a user model, eg. if you're using the sfGuardPlugin, 
{{{sfContext::getInstance()->getUser()->getGuardUser()->getId()}}}.

If you don't provide this parameter, the methods in the plugin API will raise
exceptions of type deppPropelActAsMonitorableException.

So, it's up to the application using the plugin, to correctly set the user_id value.

{{{ 
#!php
<?php
 $article->addMonitoringUser($user_id)                // void    - set the monitoring of the article by the user
 $article->removeMonitoringUser($user_id)             // object  - remove the monitoring of the article by the user
 $article->isMonitoredByUser($user_id)                // boolean - if the article is monitored by the user
 $article->getMonitoringUsers()                       // array   - list of users (id) monitoring the article
 $article->countMonitoringUsers()                     // int     - number of users monitoring the article
}}}


== !ActAsMonitorer behavior ==

=== Configuration === #actAsMonitorerBehaviorConfiguration

{{{
#!php
<?php
class User extends BaseUser
{
}
sfPropelBehavior::add(
  'User', 
  array('deppPropelActAsMonitorerBehavior' =>
        array('count_monitored_objects_field'   => 'NMonitoredObjects', // refers to UserPeer::N_MONITORED_OBJECTS
              )));
}}}

 * The {{{count_monitored_field}}} parameter, which refer to an {{{unsigned integer}}} column in phpName format of the User table, will store cached values of the actual number of objects monitored by a user. Useful for queries performances and to check whether a maximum number has been reached. Other fields can be specified in the actAsMonitorable configuration parameters, that can store the number of objects of a given type, monitored by the user. This parameter is superseeded by parameters of the same names, specified in the Monitorable classes.


By default, the plugin will use the primary key as identifier of the monitorer. '''No other fields are allowed'''.

=== API  ===

Note: In below examples, {{{$criteria}}} is a Criteria propel object,
that may filter on object types, or perform joins, sorting and other operations.

If you don't provide this parameter, an empty Criteria object will be used and 
all records will be returned.

So, it's up to the application using the plugin, to correctly set the Criteria value.

{{{ 
#!php
<?php
 $user->addMonitoredObject($object_model, $object_id)                      // void    - set the monitoring of the article by the user
 $user->removeMonitoredObject($object_model, $object_id)                   // object  - remove the monitoring of the article by the user
 $user->getMonitoredObjects($object_model, $criteria)                      // array   - list of objects of a given type, monitored by the user 
 $user->countMonitoredObjects($object_model, $criteria, $cache_override)   // int     - number of objects of a given type, monitored by the user
 $user->isMonitoring($object_model, $object_id)                            // boolean - whether the user is monitoring this object or not
}}}


== Unit testing ==

The plugin is provided with a test suite located in the {{{./test/unit}}} directory. 
To run the tests, type this line from the root of your project :

{{{
$ php plugins/deppPropelMonitoringBehaviorsPlugin/test/unit/deppPropelMonitoringBehaviorsTest.php
}}}

Note that you have to provide a Propel test object class name to run the test in the test file:

{{{
define('TEST_CLASS', 'sfTestMonitorable');
}}}

== Uninstallation ==

{{{
symfony plugin-uninstall symfony/deppPropelMonitoringBehaviorsPlugin
}}}

You will need to remove the behavior to all your model, then rebuild your model
and purge your cache.

== TODO ==
 * Provide a more detailed sample of application using the monitoring behaviors 
   (at least in the documentation)
 
== Changelog ==

=== 2008-10-29 | v0.4 ===
 * Refactored, allowing the caching for monitored objects of different types
 * Refactored API, now it's possible to add monitoring of an object both from an object's perspective and from a user's.
  * {{{actAsMonitorable::addMonitoring => actAsMonitorable::addMonitoringUser}}}
  * {{{actAsMonitorable::removeMonitoring => actAsMonitorable::removeMonitoringUser}}}
  * added {{{actAsMonitorer::removeMonitoredObject}}}
  * added {{{actAsMonitorer::removeMonitoredObject}}}

=== 2008-10-29 | v0.3 ===
 * The actAsMonitorable and actAsMonitorer behaviors are re-united under the deppPropelMonitoringBehaviors plugin.

=== 2008-10-28 | v0.2 ===
 * Splitting of the functions to count the number of objects monitored by users into the
   [wiki:deppPropelActAsMonitorerBehaviorPlugin actAsMonitorer] plugin.

=== 2008-10-24 | v0.1 ===
 * First version from the sfPropelActAsMonitorableBehaviorPlugin


== Maintainer ==

This plugin is maintened by Guglielmo Celata
({{{guglielmo.celata}}} -> {{{gmail.com}}})

Feel free to send features requests, enhancement suggestions or ideally a patch.
