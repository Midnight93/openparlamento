= deppPropelActAsMonitorableBehaviorPlugin =

This plugin is a Propel Behavior that makes any Propel object monitorable by users.
Monitor here doesn't really means anything more than a general marking. 
A user states his interest in an object. A record is inserted in a table and that's all.

== Installation ==


To install the plugin, run this command within your symfony project :

{{{
symfony plugin-install http://symfony-plugins.depp.it/deppPropelActAsMonitorableBehaviorPlugin
}}}

The source code is also available:
 * TODO
   [http://?????????/deppPropelActAsMonitorableBehaviorPlugin/ from the SVN repository] 
   (please always use a tagged version in production)
   

== Configuration ==

To activate this Propel behavior in Symfony, you must first activate behaviors 
in your propel.ini file :

{{{
propel.builder.addBehaviors = true
}}}

In one (or more) of your existing model object classes, apply the behavior. Eg. 
for an {{{Article}}} Propel model class:

{{{
#!php
<?php
class Article extends BaseArticle
{
}
sfPropelBehavior::add('Article', array('deppPropelActAsMonitorableBehavior'));
}}}

You can fine-tune behavior with optional parameters, see the 
[#Behavioroptionalparameters advanced configuration section].

Once your model configured, you have to rebuild it:

{{{
symfony propel-build-all
}}}

And clear the cache :

{{{
symfony cc
}}}

== Advanced configuration ==

=== Behavior optional parameters ===

{{{
#!php
<?php
class Article extends BaseArticle
{
}
sfPropelBehavior::add(
  'Article', 
  array('deppPropelActAsMonitorableBehavior' =>
        array('count_monitored_field'     => 'NMonitoredObjects', // refers to UserPeer::N_MONITORED_OBJECTS
              'count_monitoring_field'    => 'NMonitoringUsers',  // refers to ArticlePeer::N_MONITORING_USERS
              'reference_field'           => 'Reference',         // refers to ArticlePeer::REFERENCE
              'user_id_getter'            => 'get_connected_user_id' // how to get the user_id)));
}}}

 * The {{{count_monitored_field}}} parameter, which refer to an {{{unsigned integer}}} 
   column in phpName format of your user table, will store cached 
   value of the actual number of monitored objects by a user. 
   Useful for queries performances and to check if a maximuom number has been reached
 * The {{{count_monitoring_field}}} parameter, which refer to an {{{unsigned integer}}} 
   column in phpName format of your object table, will store cached 
   value of the actual number of users monitoring the object. 
   Useful for queries performances.
 * The {{{reference_field}}} parameter sets the name of the field where you 
   store the identifier of the object to rate. By default, the plugin will use
   the primary key of the object. You must return an integer fo referencing a
   custom identifier.
 * The {{{user_id_getter}}} parameter fixes how to retrieve the user_id (see the 
   [#Userreferenceretrievalconfiguration user reference retrieval configuration] 
   right below)

=== User reference retrieval configuration ===

By default, the plugin will search for an sfGuardPlugin
installation to retrieve authenticated user primary key. If you are using sfGuard, 
you have nothing more to configure.

Also, if a getId() method has already been defined in the custom sfUser class, 
that method is expected to return the currently authenticated user's ID, and thus
it will be automatically used.

If you don't use one of these methods, you can specify the way a unique user reference (eg. 
primary key) will be retrieved, using these available plugin settings in your 
[#Behavioroptionalparameters Behavior optional parameters]:

 * You can specify a PHP function, eg. {{{get_connected_user_id()}}}:

 {{{
 #!php
 <?php
 sfPropelBehavior::add(
   'Article', 
   array('deppPropelActAsMonitorableBehavior' =>
         array('user_id_getter' => 'get_connected_user_id')));
 }}}

 * Or a static method of a PHP class, eg. 
   {{{MyCustomUtilsClass::getConnectedUserId()}}}:

   {{{
   #!php
   <?php
   sfPropelBehavior::add(
     'Article', 
     array('deppPropelActAsMonitorableBehavior' =>
           array('user_id_getter' => ['MyCustomUtilsClass', 'getConnectedUserId'])));
   }}}


The return value of these calls should always be the primary key of your 
connected user.

== API  ==

Note: In below examples, {{{$user_id}}} is a string representing a 
unique reference to a user, eg. if you're using the sfGuardPlugin, 
{{{sfContext::getInstance()->getUser()->getGuardUser()->getId()}}}.

If you don't provide this parameter, the 
[#Userreferenceretrievalconfiguration user reference retrieval configuration]
will apply.

{{{ 
#!php
<?php
 $article->addMonitoring($user_id)           // void    - to allow a user to monitor an article
 $article->removeMonitoring($user_id)        // void    - to remove the monitoring of the article by the user
 $article->isMonitoredByUser($user_id)       // boolean - if the article is monitored by the user
 $article->isMonitoredBy()                   // array   - list of users (id) monitoring the article
 $article->userMonitors($user_id, $criteria) // array   - list of articles (id) monitored by the user (with criteria, for filtering and joins)
}}}


== Unit testing ==

The plugin is provided with a test suite located in the {{{./test}}} directory. 
To run the tests, type this line from the root of your project :

{{{
$ php plugins/deppPropelActAsMonitorableBehaviorPlugin/test/unit/deppPropelActAsMonitorableBehaviorTest.php
}}}

Note that you have to provide a Propel test object class name to run the test in the test file:

{{{
define('TEST_CLASS', 'sfTestMonitorable');
}}}

== Uninstallation ==

{{{
symfony plugin-uninstall symfony/deppPropelActAsMonitorableBehaviorPlugin
}}}

You will need to remove the behavior to all your model, then rebuild your model
and purge your cache.

== TODO ==

 * Add functional tests
 
== Changelog ==

=== 2008-10-24 | v0.1 ===

 * First version from the sfPropelActAsMonitorableBehaviorPlugin

== Maintener ==

This plugin is maintened by Guglielmo Celata
({{{guglielmo.celata}}} -> {{{gmail.com}}})

Feel free to send feture request, enhancement suggestion or ideally a patch.
